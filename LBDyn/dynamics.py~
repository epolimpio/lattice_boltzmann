import numpy as np

class LatticeBoltzmann:

    def __init__(self, ny, nx):

        self.q = 9 # number of velocities
        self.d = 2 # dimension
        self.init_grid_var()

        # Define class constants for use in its functions
        self.nx = nx
        self.ny = ny

    def init_grid_var(self):

        # Define the d2q9 vectors for each nodal point
        self.ei = np.array([(0,0),
                         (1,0), (1,1), (0,1), (-1,1),
                         (-1,0), (-1,-1), (0,-1), (1,-1)])

        # Define the weights for the vectors
        self.w = 1.0/9.0 * np.ones(self.q)
        self.w[0] = 4.0/9.0
        self.w[[2, 4, 6, 8]] = 1.0/36.0

        # Define the opposite vectors for bouncing back
        self.opposite = np.array([0,5,6,7,8,1,2,3,4])

        return True

    def calc_eq_dens(self, rho, v):

        # Density is in format (q, ny, nx) and ei is (q, dimension)
        # v is the velocity vector, with dimension (dimension, ny, nx)
        # rho is the density at each node, rho(ny, nx)

        dens_eq = np.zeros((self.q, self.ny, self.nx))

        # Make the dot product of ei and v.
        # Dimensions -> edotv(q, ny, nx)
        edotv = 3.0*np.dot(self.ei, v.transpose(1,0,2))

        # Calculate the square velocity at each node, usqr(ny, nx)
        vsqr = np.sum(v**2, axis = 0)

        # Calculate the equilibrium density
        for i in range(self.q):
            dens_eq[i,:,:] = self.w[i]*rho*(1 + edotv[i,:,:] + 0.5*edotv[i,:,:]**2.0 - 1.5*vsqr)

        return dens_eq

    def calc_v_rho(self, dens):

        # Densities are dens(q, ny, nx) and rho(ny, nx)
        rho = np.sum(dens, axis = 0)

        # ei(q, d) and dens(q, ny, nx). We need v(d, ny, nx).
        v = np.dot(self.ei.transpose(), dens.transpose(1,0,2))/rho

        return v, rho

    def bounce_back(self, dens, wall):
        
        dens_out = dens.copy()

        for i in range(self.q):
           dens_out[i, wall] = dens[self.opposite[i], wall] ### wong? wall on top is only half of the bouncing no? and wall at the bottom the other half no?

        return dens_out

    def stream(self, dens):

        dens_out = dens.copy()

        for i in range(self.q):
           dens_out[i,:,:] = np.roll(np.roll(dens[i,:,:], self.ei[i,1], axis=0), self.ei[i,0], axis=1)

        return dens_out


